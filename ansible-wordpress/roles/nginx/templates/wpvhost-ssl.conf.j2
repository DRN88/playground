server {
    listen 80;
    server_name {{ vhostfqdn }};
    location / {
        return 301 https://{{ vhostfqdn }}$request_uri;
    }
    location /.well-known/acme-challenge {
        root {{ vhostspath }}/{{ vhostfqdn }};
    }
}

server {
    listen 443 ssl http2;

    server_name {{ vhostfqdn }};
    root {{ vhostspath }}/{{ vhostfqdn }};

    ### Certbot HTTPS Config ###

    ssl_certificate /etc/letsencrypt/live/{{ vhostfqdn }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ vhostfqdn }}/privkey.pem;

    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Requires nginx >= 1.5.9
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    ############################

    index index.php;

    location = /favicon.ico {
        log_not_found off;
        access_log off;
    }

    location = /robots.txt {
        allow all;
        log_not_found off;
        access_log off;
    }

    # This matters if you use drush
    location = /backup {
        deny all;
    }

    # Very rarely should these ever be accessed outside of your lan
    location ~* \.(txt|log)$ {
        allow 127.0.0.1;
        deny all;
    }

    location ~ \..*/.*\.php {
        return 403;
    }

    location / {
        # This is cool because no php is touched for static content
        try_files $uri $uri/ @rewrite;
        expires max;
    }

    location @rewrite {
        # Some modules enforce no slash (/) at the end of the URL
        # Else this rewrite block wouldn&#39;t be needed (GlobalRedirect)
        rewrite ^/(.*)$ /index.php?q=$1;
    }

    location ~ \.php$ {

        ### FASTCGI CACHING START ###

        # Setup var defaults
        set $no_cache "";

        # If non GET/HEAD, don't cache and mark user as uncacheable for 1 second via cookie
        if ($request_method !~ ^(GET|HEAD)$) {
          set $no_cache "1";
        }

        # Drop no cache cookie if need be
        # (for some reason, add_header fails if included in prior if-block)
        if ($no_cache = "1") {
          add_header Set-Cookie "_mcnc=1; Max-Age=2; Path=/";
          add_header X-Microcachable "0";
        }

        # Bypass cache if no-cache cookie is set
        if ($http_cookie ~* "_mcnc") {
          set $no_cache "1";
        }

        # Bypass cache if flag is set
        fastcgi_no_cache $no_cache;
        fastcgi_cache_bypass $no_cache;

        fastcgi_cache microcache;
        fastcgi_cache_key $server_name|$request_uri;
        fastcgi_cache_valid 200 301 302 404 {{ nginx_fastcgicache_valid }};
        fastcgi_max_temp_file_size {{ nginx_fastcgicache_max_temp_file_size }};
        fastcgi_cache_use_stale updating;
        fastcgi_pass_header Set-Cookie;
        fastcgi_pass_header Cookie;
        fastcgi_ignore_headers Cache-Control Expires Set-Cookie;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        ### FASTCGI CACHING END ###


        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_intercept_errors on;
        fastcgi_pass unix:/run/php/php-fpm.sock;
    }

}
